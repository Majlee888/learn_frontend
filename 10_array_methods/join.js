// Метод join()экземпляров Arrayсоздает и возвращает новую строку путем объединения всех элементов этого массива,
// разделенных запятыми или указанной строкой - разделителем.Если массив содержит только один элемент,
// то этот элемент будет возвращен без использования разделителя.
// Строковые преобразования всех элементов массива объединяются в одну строку. Если элемент равен undefined, null,
// он преобразуется в пустую строку вместо строки "null"или "undefined".

// Доступ к методу joinосуществляется внутри Array.prototype.toString()без аргументов. Переопределение экземпляра массива также joinпереопределит
// его поведение.toString

// Array.prototype.joinрекурсивно преобразует каждый элемент, включая другие массивы, в строки. Поскольку строка,
// возвращаемая Array.prototype.toString(что аналогично вызову join()), не имеет разделителей, вложенные массивы выглядят так,
//  как будто они сглажены. Вы можете управлять только разделителем первого уровня, тогда как более глубокие уровни всегда используют запятую по умолчанию.

const elements = ['Fire', 'Air', 'Water'];

console.log(elements.join());
// Expected output: "Fire,Air,Water"

console.log(elements.join(''));
// Expected output: "FireAirWater"

console.log(elements.join('-'));
// Expected output: "Fire-Air-Water"

const matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
];

console.log(matrix.join()); // 1,2,3,4,5,6,7,8,9
console.log(matrix.join(";")); // 1,2,3;4,5,6;7,8,9

// В следующем примере создается массив , состоящий из трех элементов,
// а затем он объединяется четыре раза: с использованием разделителя по умолчанию, затем запятой и пробела, затем плюса и пустой строки.
const a = ["Wind", "Water", "Fire"];
a.join(); // 'Wind,Water,Fire'
a.join(", "); // 'Wind, Water, Fire'
a.join(" + "); // 'Wind + Water + Fire'
a.join(""); // 'WindWaterFire'