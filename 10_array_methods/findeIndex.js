// Метод findIndex()экземпляров Arrayвозвращает индекс первого элемента массива, который удовлетворяет предоставленной функции тестирования.
//  Если ни один элемент не удовлетворяет функции тестирования, возвращается - 1.

// См.также find()метод, который возвращает первый элемент, удовлетворяющий функции тестирования(а не его индекс).
// Это findIndex()итерационный метод .
//  Он вызывает предоставленную callbackFnфункцию один раз для каждого элемента массива в порядке возрастания индекса,
//   пока callbackFnне вернет истинное значение.
// findIndex()затем возвращает индекс этого элемента и прекращает перебор массива.
//  Если callbackFnникогда не возвращает истинное значение, findIndex()возвращает -1.

// callbackFnвызывается для каждого индекса массива, а не только для тех, которым присвоены значения.
//  Пустые слоты в разреженных массивах ведут себя так же, как и undefined.

// findIndex()не изменяет массив, в котором он вызывается, но функция предоставляется как callbackFnможет.
// Однако обратите внимание, что длина массива сохраняется до первого вызова callbackFn. Поэтому:

// callbackFnне будет посещать какие-либо элементы, добавленные за пределы начальной длины массива, когда findIndex()начался вызов.
// Изменения в уже посещенных индексах не приводят callbackFnк их повторному вызову.
// Если существующий, еще не посещенный элемент массива изменен callbackFn, его значение,
// переданное в, callbackFnбудет значением на момент посещения этого элемента. Удаленные элементы посещаются так, как если бы они были undefined.

const array1 = [5, 12, 8, 130, 44];

const isLargeNumber = (element) => element > 13;

console.log(array1.findIndex(isLargeNumber));
// Expected output: 3

// В следующем примере возвращается индекс первого элемента массива, который является простым числом или -1если простое число отсутствует.
function isPrime(element) {
    if (element % 2 === 0 || element < 2) {
        return false;
    }
    for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {
        if (element % factor === 0) {
            return false;
        }
    }
    return true;
}

console.log([4, 6, 8, 9, 12].findIndex(isPrime)); // -1, not found
console.log([4, 6, 7, 9, 12].findIndex(isPrime)); // 2 (array[2] is 7)

// Метод findIndex()считывает lengthсвойство this, а затем обращается к каждому свойству,
// ключ которого представляет собой неотрицательное целое число меньше length.
const arrayLike = {
    length: 3,
    "-1": 0.1, // ignored by findIndex() since -1 < 0
    0: 2,
    1: 7.3,
    2: 4,
};
console.log(
    Array.prototype.findIndex.call(arrayLike, (x) => !Number.isInteger(x)),
); // 1